package Controller;

import Model.Student;

import java.io.EOFException;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import utils.Menu;
import utils.inputValidation;

/*
 * @author HuynhPhan
 */
public class StudentManagement {

    inputValidation iV = new inputValidation();
    Menu menu = new Menu();

    public void createStudent(ArrayList<Student> list) {
        int number = list.size();
        if (number >= 10) {
            System.out.println("Do you want to continue (Y/N)?");
            if (!iV.checkYesNo()) {
                return;
            }
        }
        while (true) {
            System.out.print("Enter Student ID: ");
            String studenId = iV.checkStudentID();
            System.out.print("Enter name student: ");
            String studentName = iV.checkStudentName();
            if (!iV.checkStudentExist(list, studenId, studentName)) {
                System.err.println("Existed ID!");
                continue;
            }
            System.out.print("Enter Semester: ");
            String semester = iV.checkSemester();
            System.out.print("Enter Course: ");
            String courseName = iV.checkCourseName();

            if (iV.checkRegistered(list, studenId, studentName, semester, courseName)) {
                Student student = new Student(studenId, studentName, semester, courseName);
                list.add(student);
                System.out.println("Register Successful!");
                return;
            } else {
                System.err.println("Student already registered in semester!");
            }
        }
    }

    public ArrayList<Student> findStudentByName(ArrayList<Student> list) {
        ArrayList<Student> listStudentFindByName = new ArrayList<>();
        System.out.print("Enter Student Name to search: ");
        String searchName = iV.checkString();
        for (Student student : list) {
            if (student.getStudentName().toLowerCase().contains(searchName.toLowerCase())) {
                listStudentFindByName.add(student);
            }
        }
        return listStudentFindByName;
    }
    // find and sort

    public void findAndSort(ArrayList<Student> list) {
        if (list.isEmpty()) {
            System.err.println("Student list is empty!");
            return;
        }
        ArrayList<Student> listStudentFindByName = findStudentByName(list);
        if (listStudentFindByName.isEmpty()) {
            System.out.println("Not found!");
        } else {
            Collections.sort(listStudentFindByName, new Comparator<Student>() {
                @Override
                public int compare(Student o1, Student o2) {
                    if (o1.getStudentName().equals(o2.getStudentName())) {
                        // Sort by ID asc
                        return o1.getStudentId().compareTo(o2.getStudentId());
                    } else {
                        return o1.getStudentName().compareTo(o2.getStudentName());
                    }
                }

            });
            System.out.printf("| %-10s | %-20s | %-8s | %-11s |\n", "Student ID", "Student Name", "Semester", "Course Name");
            listStudentFindByName.forEach((student) -> {
                student.displayInfor();
            });
        }
    }

    public ArrayList<Student> findStudentByID(ArrayList<Student> list, String id) {
        ArrayList<Student> listStudentFindById = new ArrayList<>();
        for (Student student : list) {
            if (student.getStudentId().equalsIgnoreCase(id)) {
                listStudentFindById.add(student);
            }
        }
        return listStudentFindById;
    }

//    
    public Student getStudentInSearchList(ArrayList<Student> listSearchById, String id) {
        System.out.println("--- Search Student By ID: " + id + " ---");
        int count = 1;
        System.out.printf("|%-5s|%-10s|%-20s|%-10s|%-12s|\n", "No", "Student ID", "Student Name", "Semester", "Course Name");
        for (Student s : listSearchById) {
            System.out.printf("|%-5s|%-10s|%-20s|%-10s|%-12s|\n",
                    count, s.getStudentId(), s.getStudentName(), s.getSemester(), s.getCourseName());
            count++;
        }
        System.out.print("Choose a student in the list above: ");
        int choose = iV.validateMenuOption(1, count);
        return listSearchById.get(choose - 1);
    }

//    
    public void updateAndDelete(ArrayList<Student> list) {
        if (list.isEmpty()) {
            System.err.println("Student list is empty!");
            return;
        }
        System.out.print("Enter ID Student need find: ");
        String idSearch = iV.checkStudentID();
        ArrayList<Student> listStudentFindById = new ArrayList<>();

        listStudentFindById = findStudentByID(list, idSearch);
        if (listStudentFindById.isEmpty()) {
            System.out.println("Student ID not found!");
        } else {
            Student selectedStudent = getStudentInSearchList(listStudentFindById, idSearch);
            System.out.print("Do you want to update (U) or delete (D) student?: ");
            // True : Update , False : Delete
 
            //Update
            if (iV.checkUpdateDelete()) {
                while (true) {
                    System.out.println("---Change Student Information---");
                    menu.UpdateStudentMenu();
                    int choice = iV.validateMenuOption(1, 4);
                    switch (choice) {
                        case 1:
                            // Update Name
                            System.out.print("Enter new name: ");
                            String newName = iV.checkStudentName();
                            if (newName.equalsIgnoreCase(selectedStudent.getStudentName())) {
                                System.out.println("Nothing change !");
                            } else {
                                for (Student student : listStudentFindById) {
                                    student.setStudentName(newName);
                                }
                                System.out.println("Change Name successful");
                            }
                            break;
                        case 2:
                            System.out.print("Enter Semester to update: ");
                            String newSemester = iV.checkSemester();
                            if (newSemester.equalsIgnoreCase(selectedStudent.getSemester())) {
                                System.out.println("Nothing change !");
                            } else {
                                if (iV.checkRegistered(list, selectedStudent.getStudentId(), selectedStudent.getStudentName(),
                                        newSemester, selectedStudent.getCourseName())) {
                                    selectedStudent.setSemester(newSemester);
                                    System.out.println("Change semester successful");
                                } else {
                                    System.out.println("Student already registered in semester!");
                                }
                            }
                            break;
                        case 3:
                            System.out.print("Enter course name to update: ");
                            String newCourse = iV.checkCourseName();
                            if (newCourse.equalsIgnoreCase(selectedStudent.getCourseName())) {
                                System.out.println("Nothing change !");
                            } else {
                                if (iV.checkRegistered(list, selectedStudent.getStudentId(), selectedStudent.getStudentName(),
                                        selectedStudent.getSemester(), newCourse)) {
                                    selectedStudent.setCourseName(newCourse);
                                    System.out.println("Change course name successful");
                                } else {
                                    System.out.println("Student already registered " + newCourse);
                                }
                            }
                            break;
                        case 4:
                            System.out.println("Return Home");
                            return;
                    }
                }
            } //Delete
            else {
                list.remove(selectedStudent);
                System.out.println("Delete student successful !");
            }
        }
    }

    public void displayReport(List<Student> list) {
        if (list.isEmpty()) {
            System.err.println("Student list is empty!");
            return;
        }
        HashMap<String,Integer> reports = new HashMap<>();
        for (Student student : list) {
            String key = student.getStudentId() + "/" + student.getStudentName() + "#" + student.getCourseName();
            if (reports.containsKey(key)) {
                int total = reports.get(key);
                reports.put(key, total + 1);
            } else {
                reports.put(key, 1);
            }
        }   
        System.out.println("--- Student Roport List ---");
        System.out.printf("| %-3s | %-20s | %-11s | %-11s |\n", "No", "Student Name", "Course Name", "Total Learn");
        int count = 1;
        for (String key : reports.keySet()) {
            String text = key.split("/")[1];
            String name = text.split("#")[0];
            String course = text.split("#")[1];
            int total = reports.get(key);
            System.out.printf("| %-3s | %-20s | %-11s | %-11s |\n", count, name, course, total);
            count++;
        }
    }

    public void writeFile(List<Student> list) throws IOException {
        
        if (list.isEmpty()) {
            System.out.println("List student is empty");
            return;
        }

        try {
            FileOutputStream fileOut = new FileOutputStream("student.dat",false);
            ObjectOutputStream objectOutput = new ObjectOutputStream(fileOut);
            for (Student s : list) {
                objectOutput.writeObject(s);
            }
            objectOutput.close();
            fileOut.close();
            System.out.println("Created file list student successful!");
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        }

    }

    public void readFile(ArrayList<Student>list) {
        File file = new File("student.dat");
        if (!file.exists()) {
            System.err.println("File not exist!");
            return;
        }
        try {
            FileInputStream fileIn = new FileInputStream(file);
            ObjectInputStream objectInput = new ObjectInputStream(fileIn);
            while (true) {
                try {
                    Student student =  (Student) objectInput.readObject();
                   list.add(student);
                    System.out.println(student.toString());
                } catch (EOFException e) {
                    break; // Khi gặp kết thúc file, thoát khỏi vòng lặp
                }
            }
             
            objectInput.close();
            fileIn.close();
        } catch (IOException ex) {
            System.err.println("File Empty");
        } catch (ClassNotFoundException ex) {
            ex.printStackTrace();
//            System.out.println("File Empty");

        }
    }
}